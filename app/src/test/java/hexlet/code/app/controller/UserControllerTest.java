package hexlet.code.app.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import hexlet.code.app.helpers.TestDataFactory;
import hexlet.code.app.model.User;
import hexlet.code.app.repository.UserRepository;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.util.HashMap;

import static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.jwt;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
public class UserControllerTest {

    private final String baseUrl = "/api/users";

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ObjectMapper om;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private TestDataFactory testDataFactory;

    private User testUser;

    @BeforeEach
    public void setUp() {
        testUser = testDataFactory.makeUser();
    }

    @Test
    public void testShow() throws Exception {
        userRepository.save(testUser);

        var request = get(baseUrl + "/" + testUser.getId()).with(jwt());

        var result = mockMvc.perform(request)
                .andExpect(status().isOk())
                .andReturn();
        var body = result.getResponse().getContentAsString();

        assertThatJson(body).and(
                v -> v.node("firstName").isEqualTo(testUser.getFirstName()),
                v -> v.node("email").isEqualTo(testUser.getEmail())
        );
    }

    @Test
    public void testCreate() throws Exception {
        var password = "qwerty";
        testUser.setPassword(password);

        var request = post(baseUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .content(om.writeValueAsString(testUser));

        mockMvc.perform(request)
                .andExpect(status().isCreated());

        var user = userRepository.findByEmail(testUser.getEmail()).get();

        assertThat(user).isNotNull();
        assertThat(user.getFirstName()).isEqualTo(testUser.getFirstName());
        assertThat(passwordEncoder.matches(password, user.getPassword())).isTrue();
    }

    @Test
    public void testCreateWithNotValidEmail() throws Exception {
        testUser.setEmail("qwert");

        var request = post(baseUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .content(om.writeValueAsString(testUser));

        mockMvc.perform(request)
                .andExpect(status().isBadRequest());
    }

    @Test
    public void testCreateWithNotValidPassword() throws Exception {
        testUser.setPassword("1");

        var request = post(baseUrl)
                .contentType(MediaType.APPLICATION_JSON)
                .content(om.writeValueAsString(testUser));

        mockMvc.perform(request)
                .andExpect(status().isBadRequest());
    }

    @Test
    public void testAutoGeneratedFields() {
        userRepository.save(testUser);

        assertThat(testUser.getCreatedAt()).isNotNull();
        assertThat(testUser.getUpdatedAt()).isNotNull();
        assertThat(testUser.getCreatedAt()).isEqualTo(testUser.getUpdatedAt());
    }

    @Test
    public void testUpdatePositive() throws Exception {
        userRepository.save(testUser);

        var data = new HashMap<>();
        var oldPassword = testUser.getPassword();
        var newPassword = "qwerty12345";
        data.put("firstName", "someFirstName");
        data.put("email", "someEmail@ya.com");
        data.put("password", newPassword);

        var request = put(baseUrl + "/" + testUser.getId())
                .with(jwt())
                .with(user(testUser))
                .contentType(MediaType.APPLICATION_JSON)
                .content(om.writeValueAsString(data));

        mockMvc.perform(request)
                .andExpect(status().isOk());

        var user = userRepository.findById(testUser.getId()).get();
        assertThat(user.getFirstName()).isEqualTo("someFirstName");
        assertThat(user.getEmail()).isEqualTo("someEmail@ya.com");
        assertThat(passwordEncoder.matches(newPassword, oldPassword)).isFalse();
        assertThat(passwordEncoder.matches(newPassword, user.getPassword())).isTrue();
    }

    @Test
    @WithMockUser(username = "wrong@wrong.ru")
    public void testUpdateNegative() throws Exception {
        userRepository.save(testUser);

        var data = new HashMap<>();
        data.put("firstName", "someFirstName");
        data.put("email", "someEmail@ya.com");

        var request = put(baseUrl + "/" + testUser.getId())
                .with(jwt())
                .contentType(MediaType.APPLICATION_JSON)
                .content(om.writeValueAsString(data));

        mockMvc.perform(request)
                .andExpect(status().isForbidden());
    }

    @Test
    public void testIndex() throws Exception {
        userRepository.save(testUser);

        var request = get(baseUrl).with(jwt());

        var result = mockMvc.perform(request)
                .andExpect(status().isOk())
                .andReturn();
        var body = result.getResponse().getContentAsString();

        assertThatJson(body).isArray();
    }

    @Test
    public void testDeleteWrong() throws Exception {
        var userToBeDeleted = testDataFactory.makeUser();
        userRepository.save(userToBeDeleted);
        userRepository.save(testUser);

        var request = delete(baseUrl + "/" + userToBeDeleted.getId())
                .with(user(testUser));

        mockMvc.perform(request)
                .andExpect(status().isForbidden());
    }

    @Test
    public void testDelete() throws Exception {
        userRepository.save(testUser);

        var request = delete(baseUrl + "/" + testUser.getId())
                .with(user(testUser));

        mockMvc.perform(request)
                .andExpect(status().isOk());
    }
}
